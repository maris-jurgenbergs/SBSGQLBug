// <auto-generated/>
#nullable enable

namespace ConsoleApp1
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneTestResult : global::System.IEquatable<MutationOneTestResult>, IMutationOneTestResult
    {
        public MutationOneTestResult(global::ConsoleApp1.IMutationOneTest_TestMutation testMutation)
        {
            TestMutation = testMutation;
        }

        public global::ConsoleApp1.IMutationOneTest_TestMutation TestMutation { get; }

        public virtual global::System.Boolean Equals(MutationOneTestResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TestMutation.Equals(other.TestMutation));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MutationOneTestResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TestMutation.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneTest_TestMutation_MutationResultVariantA : global::System.IEquatable<MutationOneTest_TestMutation_MutationResultVariantA>, IMutationOneTest_TestMutation_MutationResultVariantA
    {
        public MutationOneTest_TestMutation_MutationResultVariantA(global::ConsoleApp1.IMutationOneTest_TestMutation_Parent parent)
        {
            Parent = parent;
        }

        public global::ConsoleApp1.IMutationOneTest_TestMutation_Parent Parent { get; }

        public virtual global::System.Boolean Equals(MutationOneTest_TestMutation_MutationResultVariantA? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MutationOneTest_TestMutation_MutationResultVariantA)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Parent.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneTest_TestMutation_MutationResultVariantB : global::System.IEquatable<MutationOneTest_TestMutation_MutationResultVariantB>, IMutationOneTest_TestMutation_MutationResultVariantB
    {
        public MutationOneTest_TestMutation_MutationResultVariantB(global::ConsoleApp1.IMutationOneTest_TestMutation_Parent parent)
        {
            Parent = parent;
        }

        public global::ConsoleApp1.IMutationOneTest_TestMutation_Parent Parent { get; }

        public virtual global::System.Boolean Equals(MutationOneTest_TestMutation_MutationResultVariantB? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MutationOneTest_TestMutation_MutationResultVariantB)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Parent.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneTest_TestMutation_Parent_ParentVariant : global::System.IEquatable<MutationOneTest_TestMutation_Parent_ParentVariant>, IMutationOneTest_TestMutation_Parent_ParentVariant
    {
        public MutationOneTest_TestMutation_Parent_ParentVariant(global::System.Int32 someValue)
        {
            SomeValue = someValue;
        }

        public global::System.Int32 SomeValue { get; }

        public virtual global::System.Boolean Equals(MutationOneTest_TestMutation_Parent_ParentVariant? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SomeValue == other.SomeValue);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MutationOneTest_TestMutation_Parent_ParentVariant)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SomeValue.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOneTestResult
    {
        public global::ConsoleApp1.IMutationOneTest_TestMutation TestMutation { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOneTest_TestMutation
    {
        public global::ConsoleApp1.IMutationOneTest_TestMutation_Parent Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOneTest_TestMutation_MutationResultVariantA : IMutationOneTest_TestMutation
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOneTest_TestMutation_MutationResultVariantB : IMutationOneTest_TestMutation
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOneTest_TestMutation_Parent
    {
        public global::System.Int32 SomeValue { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOneTest_TestMutation_Parent_ParentVariant : IMutationOneTest_TestMutation_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneResult : global::System.IEquatable<MutationOneResult>, IMutationOneResult
    {
        public MutationOneResult(global::ConsoleApp1.IMutationOne_TestMutation testMutation)
        {
            TestMutation = testMutation;
        }

        public global::ConsoleApp1.IMutationOne_TestMutation TestMutation { get; }

        public virtual global::System.Boolean Equals(MutationOneResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TestMutation.Equals(other.TestMutation));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MutationOneResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TestMutation.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOne_TestMutation_MutationResultVariantA : global::System.IEquatable<MutationOne_TestMutation_MutationResultVariantA>, IMutationOne_TestMutation_MutationResultVariantA
    {
        public MutationOne_TestMutation_MutationResultVariantA()
        {
        }

        public virtual global::System.Boolean Equals(MutationOne_TestMutation_MutationResultVariantA? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MutationOne_TestMutation_MutationResultVariantA)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOne_TestMutation_MutationResultVariantB : global::System.IEquatable<MutationOne_TestMutation_MutationResultVariantB>, IMutationOne_TestMutation_MutationResultVariantB
    {
        public MutationOne_TestMutation_MutationResultVariantB(global::ConsoleApp1.IMutationOne_TestMutation_Parent parent)
        {
            Parent = parent;
        }

        public global::ConsoleApp1.IMutationOne_TestMutation_Parent Parent { get; }

        public virtual global::System.Boolean Equals(MutationOne_TestMutation_MutationResultVariantB? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MutationOne_TestMutation_MutationResultVariantB)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Parent.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOne_TestMutation_Parent_ParentVariant : global::System.IEquatable<MutationOne_TestMutation_Parent_ParentVariant>, IMutationOne_TestMutation_Parent_ParentVariant
    {
        public MutationOne_TestMutation_Parent_ParentVariant(global::System.Int32 someValue)
        {
            SomeValue = someValue;
        }

        public global::System.Int32 SomeValue { get; }

        public virtual global::System.Boolean Equals(MutationOne_TestMutation_Parent_ParentVariant? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SomeValue == other.SomeValue);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MutationOne_TestMutation_Parent_ParentVariant)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SomeValue.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOneResult
    {
        public global::ConsoleApp1.IMutationOne_TestMutation TestMutation { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOne_TestMutation
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOne_TestMutation_MutationResultVariantA : IMutationOne_TestMutation
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOne_TestMutation_MutationResultVariantB : IMutationOne_TestMutation
    {
        public global::ConsoleApp1.IMutationOne_TestMutation_Parent Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOne_TestMutation_Parent
    {
        public global::System.Int32 SomeValue { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOne_TestMutation_Parent_ParentVariant : IMutationOne_TestMutation_Parent
    {
    }

    /// <summary>
    /// Represents the operation service of the MutationOneTest GraphQL operation
    /// <code>
    /// mutation MutationOneTest {
    ///   testMutation {
    ///     __typename
    ///     parent {
    ///       __typename
    ///       someValue
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneTestMutationDocument : global::StrawberryShake.IDocument
    {
        private MutationOneTestMutationDocument()
        {
        }

        public static MutationOneTestMutationDocument Instance { get; } = new MutationOneTestMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fef19bdbd5889f796dcf31f2a9f4dd15");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the MutationOneTest GraphQL operation
    /// <code>
    /// mutation MutationOneTest {
    ///   testMutation {
    ///     __typename
    ///     parent {
    ///       __typename
    ///       someValue
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneTestMutation : global::ConsoleApp1.IMutationOneTestMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IMutationOneTestResult> _operationExecutor;
        public MutationOneTestMutation(global::StrawberryShake.IOperationExecutor<IMutationOneTestResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IMutationOneTestResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMutationOneTestResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IMutationOneTestResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: MutationOneTestMutationDocument.Instance.Hash.Value, name: "MutationOneTest", document: MutationOneTestMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the MutationOneTest GraphQL operation
    /// <code>
    /// mutation MutationOneTest {
    ///   testMutation {
    ///     __typename
    ///     parent {
    ///       __typename
    ///       someValue
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOneTestMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMutationOneTestResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IMutationOneTestResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the MutationOne GraphQL operation
    /// <code>
    /// mutation MutationOne {
    ///   testMutation {
    ///     __typename
    ///     ... on MutationResultVariantB {
    ///       parent {
    ///         __typename
    ///         ... on ParentVariant {
    ///           someValue
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneMutationDocument : global::StrawberryShake.IDocument
    {
        private MutationOneMutationDocument()
        {
        }

        public static MutationOneMutationDocument Instance { get; } = new MutationOneMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x20, 0x7b, 0x20, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x20, 0x7b, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7e4ef83e5a62fa1c0ff9a91b0030dab6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the MutationOne GraphQL operation
    /// <code>
    /// mutation MutationOne {
    ///   testMutation {
    ///     __typename
    ///     ... on MutationResultVariantB {
    ///       parent {
    ///         __typename
    ///         ... on ParentVariant {
    ///           someValue
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneMutation : global::ConsoleApp1.IMutationOneMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IMutationOneResult> _operationExecutor;
        public MutationOneMutation(global::StrawberryShake.IOperationExecutor<IMutationOneResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IMutationOneResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMutationOneResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IMutationOneResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: MutationOneMutationDocument.Instance.Hash.Value, name: "MutationOne", document: MutationOneMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the MutationOne GraphQL operation
    /// <code>
    /// mutation MutationOne {
    ///   testMutation {
    ///     __typename
    ///     ... on MutationResultVariantB {
    ///       parent {
    ///         __typename
    ///         ... on ParentVariant {
    ///           someValue
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationOneMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IMutationOneResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IMutationOneResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GraphQLClient : global::ConsoleApp1.IGraphQLClient
    {
        private readonly global::ConsoleApp1.IMutationOneTestMutation _mutationOneTest;
        private readonly global::ConsoleApp1.IMutationOneMutation _mutationOne;
        public GraphQLClient(global::ConsoleApp1.IMutationOneTestMutation mutationOneTest, global::ConsoleApp1.IMutationOneMutation mutationOne)
        {
            _mutationOneTest = mutationOneTest ?? throw new global::System.ArgumentNullException(nameof(mutationOneTest));
            _mutationOne = mutationOne ?? throw new global::System.ArgumentNullException(nameof(mutationOne));
        }

        public static global::System.String ClientName => "GraphQLClient";
        public global::ConsoleApp1.IMutationOneTestMutation MutationOneTest => _mutationOneTest;
        public global::ConsoleApp1.IMutationOneMutation MutationOne => _mutationOne;
    }

    /// <summary>
    /// Represents the GraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IGraphQLClient
    {
        global::ConsoleApp1.IMutationOneTestMutation MutationOneTest { get; }

        global::ConsoleApp1.IMutationOneMutation MutationOne { get; }
    }
}

namespace ConsoleApp1.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneTestResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.MutationOneTestResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public MutationOneTestResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ConsoleApp1.IMutationOneTestResult);
        public MutationOneTestResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is MutationOneTestResultInfo info)
            {
                return new MutationOneTestResult(MapNonNullableIMutationOneTest_TestMutation(info.TestMutation, snapshot));
            }

            throw new global::System.ArgumentException("MutationOneTestResultInfo expected.");
        }

        private global::ConsoleApp1.IMutationOneTest_TestMutation MapNonNullableIMutationOneTest_TestMutation(global::ConsoleApp1.State.IMutationResultData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IMutationOneTest_TestMutation? returnValue;
            if (data is global::ConsoleApp1.State.MutationResultVariantAData mutationResultVariantA)
            {
                returnValue = new global::ConsoleApp1.MutationOneTest_TestMutation_MutationResultVariantA(MapNonNullableIMutationOneTest_TestMutation_Parent(mutationResultVariantA.Parent, snapshot));
            }
            else if (data is global::ConsoleApp1.State.MutationResultVariantBData mutationResultVariantB)
            {
                returnValue = new global::ConsoleApp1.MutationOneTest_TestMutation_MutationResultVariantB(MapNonNullableIMutationOneTest_TestMutation_Parent(mutationResultVariantB.Parent, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConsoleApp1.IMutationOneTest_TestMutation_Parent MapNonNullableIMutationOneTest_TestMutation_Parent(global::ConsoleApp1.State.IParentTypeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IMutationOneTest_TestMutation_Parent? returnValue;
            if (data is global::ConsoleApp1.State.ParentVariantData parentVariant)
            {
                if (!parentVariant.SomeValue.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::ConsoleApp1.MutationOneTest_TestMutation_Parent_ParentVariant(parentVariant.SomeValue!.Value);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneTestResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public MutationOneTestResultInfo(global::ConsoleApp1.State.IMutationResultData testMutation, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            TestMutation = testMutation;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ConsoleApp1.State.IMutationResultData TestMutation { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new MutationOneTestResultInfo(TestMutation, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.MutationOneResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public MutationOneResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ConsoleApp1.IMutationOneResult);
        public MutationOneResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is MutationOneResultInfo info)
            {
                return new MutationOneResult(MapNonNullableIMutationOne_TestMutation(info.TestMutation, snapshot));
            }

            throw new global::System.ArgumentException("MutationOneResultInfo expected.");
        }

        private global::ConsoleApp1.IMutationOne_TestMutation MapNonNullableIMutationOne_TestMutation(global::ConsoleApp1.State.IMutationResultData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IMutationOne_TestMutation? returnValue;
            if (data is global::ConsoleApp1.State.MutationResultVariantAData mutationResultVariantA)
            {
                returnValue = new global::ConsoleApp1.MutationOne_TestMutation_MutationResultVariantA();
            }
            else if (data is global::ConsoleApp1.State.MutationResultVariantBData mutationResultVariantB)
            {
                returnValue = new global::ConsoleApp1.MutationOne_TestMutation_MutationResultVariantB(MapNonNullableIMutationOne_TestMutation_Parent(mutationResultVariantB.Parent, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ConsoleApp1.IMutationOne_TestMutation_Parent MapNonNullableIMutationOne_TestMutation_Parent(global::ConsoleApp1.State.ParentVariantData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IMutationOne_TestMutation_Parent returnValue = default !;
            if (data.__typename.Equals("ParentVariant", global::System.StringComparison.Ordinal))
            {
                returnValue = new MutationOne_TestMutation_Parent_ParentVariant(data.SomeValue ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public MutationOneResultInfo(global::ConsoleApp1.State.IMutationResultData testMutation, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            TestMutation = testMutation;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ConsoleApp1.State.IMutationResultData TestMutation { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new MutationOneResultInfo(TestMutation, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneTestBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IMutationOneTestResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IMutationOneTestResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public MutationOneTestBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IMutationOneTestResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IMutationOneTestResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IMutationOneTestResult Result, MutationOneTestResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IMutationOneTestResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IMutationOneTestResult, MutationOneTestResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new MutationOneTestResultInfo(DeserializeNonNullableIMutationResultData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "testMutation")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::ConsoleApp1.State.IMutationResultData DeserializeNonNullableIMutationResultData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MutationResultVariantA", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConsoleApp1.State.MutationResultVariantAData(typename, parent: DeserializeNonNullableIMutationOneTest_TestMutation_Parent(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent")));
            }

            if (typename?.Equals("MutationResultVariantB", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConsoleApp1.State.MutationResultVariantBData(typename, parent: DeserializeNonNullableIMutationOneTest_TestMutation_Parent(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConsoleApp1.State.IParentTypeData DeserializeNonNullableIMutationOneTest_TestMutation_Parent(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ParentVariant", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConsoleApp1.State.ParentVariantData(typename, someValue: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "someValue")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationOneBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IMutationOneResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IMutationOneResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public MutationOneBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IMutationOneResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IMutationOneResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IMutationOneResult Result, MutationOneResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IMutationOneResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IMutationOneResult, MutationOneResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new MutationOneResultInfo(DeserializeNonNullableIMutationResultData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "testMutation")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::ConsoleApp1.State.IMutationResultData DeserializeNonNullableIMutationResultData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MutationResultVariantA", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConsoleApp1.State.MutationResultVariantAData(typename);
            }

            if (typename?.Equals("MutationResultVariantB", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConsoleApp1.State.MutationResultVariantBData(typename, parent: DeserializeNonNullableIMutationOne_TestMutation_Parent(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ConsoleApp1.State.ParentVariantData DeserializeNonNullableIMutationOne_TestMutation_Parent(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ParentVariant", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConsoleApp1.State.ParentVariantData(typename, someValue: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "someValue")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMutationResultData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationResultVariantAData : IMutationResultData
    {
        public MutationResultVariantAData(global::System.String __typename, global::ConsoleApp1.State.IParentTypeData? parent = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Parent = parent;
        }

        public global::System.String __typename { get; }

        public global::ConsoleApp1.State.IParentTypeData? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MutationResultVariantBData : IMutationResultData
    {
        public MutationResultVariantBData(global::System.String __typename, global::ConsoleApp1.State.IParentTypeData? parent = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Parent = parent;
        }

        public global::System.String __typename { get; }

        public global::ConsoleApp1.State.IParentTypeData? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IParentTypeData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ParentVariantData : IParentTypeData
    {
        public ParentVariantData(global::System.String __typename, global::System.Int32? someValue = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            SomeValue = someValue;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? SomeValue { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GraphQLClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class GraphQLClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GraphQLClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public static partial class GraphQLClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::ConsoleApp1.State.GraphQLClientStoreAccessor> AddGraphQLClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::ConsoleApp1.State.GraphQLClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.MutationOneTestMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.MutationOneMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.GraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.IGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::ConsoleApp1.State.GraphQLClientStoreAccessor>("GraphQLClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GraphQLClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IMutationOneTestResult>, global::ConsoleApp1.State.MutationOneTestResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IMutationOneTestResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.IMutationOneTestMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IMutationOneTestResult>, global::ConsoleApp1.State.MutationOneTestBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ConsoleApp1.IMutationOneTestResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IMutationOneTestResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IMutationOneTestResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.MutationOneTestMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.IMutationOneTestMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.MutationOneTestMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IMutationOneResult>, global::ConsoleApp1.State.MutationOneResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IMutationOneResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.IMutationOneMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IMutationOneResult>, global::ConsoleApp1.State.MutationOneBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ConsoleApp1.IMutationOneResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IMutationOneResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IMutationOneResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.MutationOneMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.IMutationOneMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.MutationOneMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::ConsoleApp1.State.GraphQLClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.GraphQLClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.IGraphQLClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.GraphQLClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
